{"version":3,"file":"jseeder.js","sources":["../src/core/services/i18n.ts","../src/core/services/pnrg.ts","../src/core/Generator.ts","../src/core/interfaces/collection.ts","../src/core/utils/objectMap.ts","../src/core/Structure.ts","../src/core/Collection.ts","../src/dictionaries/en/alphabet.ts","../src/dictionaries/en/index.ts","../src/dictionaries/index.ts","../src/generators/Dataset.ts","../src/generators/String.ts","../src/generators/Uuid.ts","../src/public_api/generatorsFunctions.ts","../src/index.ts"],"sourcesContent":["import {IDictionary, IDictionaryHash} from '../interfaces/index';\n\nexport class I18n {\n    protected locale: string;\n    protected dictionaries: IDictionaryHash;\n\n    constructor(locale?: string, dictionaries?: IDictionaryHash) {\n        this.locale = locale;\n        this.dictionaries = dictionaries;\n    }\n\n    public getActiveDictionary(): IDictionary {\n        return this.dictionaries[this.locale];\n    }\n\n    public setLocale(locale: string) {\n        this.locale = locale;\n        return this;\n    }\n\n    public setDictionaries(dictionaries: IDictionaryHash) {\n        this.dictionaries = dictionaries;\n        return this;\n    }\n}\n\nexport const i18n = new I18n();\n","export class Pnrg {\n    protected seed: number;\n\n    constructor() {\n        this.seed = Math.floor((Math.random() * 0xF4240) + 1);\n    }\n\n    public random(): number {\n        return Math.abs(Math.sin(++this.seed * (this.seed + 0xFF))); // very stupid algorithm\n    }\n\n    public setSeed(seed: number): this {\n        this.seed = seed;\n        return this;\n    }\n}\n\nexport const pnrg = new Pnrg();\n","import {IDictionary} from './interfaces/index';\nimport {I18n, i18n} from './services/i18n';\nimport {Pnrg, pnrg} from './services/pnrg';\nimport {MaskMapperType} from './types/index';\n\nexport default abstract class Generator {\n    protected readonly hexNumberCharset: string = '0123456789ABCDEF';\n    protected readonly decNumberCharset: string = '0123456789';\n\n    protected i18n: I18n;\n    protected pnrg: Pnrg;\n\n    constructor() {\n        this.i18n = i18n;\n        this.pnrg = pnrg;\n    }\n\n    public abstract generate(): any;\n\n    public get() {\n        return this.generate();\n    }\n\n    protected getDictionary(): IDictionary {\n        return this.i18n.getActiveDictionary();\n    }\n\n    protected random(): number {\n        return this.pnrg.random();\n    }\n\n    protected makeMaskMapper(mask: string, replaceableChar: string = '#'): MaskMapperType {\n        return callback => mask.split('')\n            .map(character => character === replaceableChar ? callback(character) : character)\n            .join('');\n    }\n\n    protected getRandomFromArray<T>(array: T[]): T {\n        return array[Math.floor(this.random() * array.length)];\n    }\n}\n","export interface ICollection {\n    setObject(object: object): this;\n\n    setSize(value: number): this;\n\n    setSourceArray(array: any[]): this;\n\n    process(): any[];\n}\n\nexport function instanceOfICollection(object: any) {\n    return [\n        'setObject',\n        'setSize',\n        'setSourceArray',\n        'process'\n    ].every(methodName => methodName in object);\n}\n","export default (object, callback) => Object.keys(object).reduce((result, propName, index) => ({\n    ...result,\n    [propName]: callback(object[propName], propName, index, result)\n}), {});\n","import Generator from './Generator';\nimport {instanceOfICollection} from './interfaces/collection';\nimport objectMap from './utils/objectMap';\n\nexport default class Structure {\n    protected object: object;\n\n    constructor(object: object = {}) {\n        this.object = object;\n    }\n\n    public setObject(value): this {\n        this.object = value;\n        return this;\n    }\n\n    public process(sourceObject: object = {}): object {\n        return {\n            ...sourceObject,\n            ...this.processObject(this.object)\n        };\n    }\n\n    protected processObject(object: object): object {\n        return objectMap(object, value => this.processProperty(value));\n    }\n\n    protected processProperty(value: any): any {\n        let processedValue;\n\n        if (value instanceof Generator) {\n            processedValue = value.generate();\n        } else if (instanceOfICollection(value)) { // recursion to child collection\n            processedValue = value.process();\n        } else if (value instanceof Object) {\n            processedValue = this.process(value);\n        } else { // plain value\n            processedValue = value;\n        }\n\n        return processedValue;\n    }\n}\n","import Structure from './Structure';\n\nexport default class Collection {\n    public static make(object: object) {\n        return new this(object);\n    }\n\n    protected structure: object;\n    protected sourceArray: any[];\n    protected size: number;\n\n    constructor(object: object) {\n        this.structure = new Structure(object);\n    }\n\n    public setObject(object: object): this {\n        this.structure = object;\n        return this;\n    }\n\n    public setSize(value: number): this {\n        this.size = value;\n        return this;\n    }\n\n    public setSourceArray(array: any[]): this {\n        this.sourceArray = array;\n        return this;\n    }\n\n    public process(): any[] {\n        return this.getArrayForFill().map(sourceObject => {\n            return new Structure(this.structure).process(sourceObject);\n        });\n    }\n\n    protected getArrayForFill(): any[] {\n        let sourceArray: any[];\n\n        if (this.sourceArray != null && this.size != null) {\n            sourceArray = this.normalizeSourceArrayByCount(this.sourceArray, this.size);\n        } else if (this.sourceArray != null) {\n            sourceArray = [...this.sourceArray];\n        } else {\n            sourceArray = (new Array(this.size || 0)).fill({});\n        }\n\n        return sourceArray;\n    }\n\n    protected normalizeSourceArrayByCount(array: any[], count: number): any[] {\n        return count > array.length ?\n            [...array, new Array(count - array.length).fill({})]\n            : array.filter((item, index) => index < count);\n    }\n}\n","export default 'abcdefghijklmnopqrstuvwxyz';\n","import alphabet from './alphabet';\n\nexport default {\n    alphabet\n};\n","import en from './en/index';\n\nexport default {\n    en\n};\n","import Generator from '../core/Generator';\n\nexport interface IDatasetGeneratorParams {\n    data?: any[];\n}\n\nexport class DatasetGenerator extends Generator {\n    public static make(params?: IDatasetGeneratorParams): DatasetGenerator {\n        return new this(params);\n    }\n\n    public static get(params?: IDatasetGeneratorParams): any {\n        return DatasetGenerator.make(params).get();\n    }\n\n    protected data: any[];\n\n    constructor({data = []}: IDatasetGeneratorParams) {\n        super();\n        this.data = data;\n    }\n\n    public generate(): any {\n        return this.getRandomFromArray(this.data);\n    }\n\n    public setData(data: any[]): this {\n        this.data = data;\n        return this;\n    }\n}\n","import Generator from '../core/Generator';\n\nexport interface IStringGeneratorParams {\n    size?: number;\n    customCharset?: string;\n}\n\nexport class StringGenerator extends Generator {\n    public static make(params?: IStringGeneratorParams): StringGenerator {\n        return new this(params);\n    }\n\n    public static get(params?: IStringGeneratorParams): string {\n        return this.make(params).get();\n    }\n\n    protected size: number;\n    protected customCharset: string;\n\n    constructor({size = 8, customCharset}: IStringGeneratorParams) {\n        super();\n        this.size = size;\n        this.customCharset = customCharset;\n    }\n\n    public generate(): string {\n        const charset: string = this.getCharset();\n        let value: string = '';\n\n        for (let i = 0; i < this.size; i++) {\n            value += this.getRandomFromArray(charset.split(''));\n        }\n\n        return value;\n    }\n\n    public setSize(size: number): this {\n        this.size = size;\n        return this;\n    }\n\n    public setCustomCharset(charset: string): this {\n        this.customCharset = charset;\n        return this;\n    }\n\n    protected getCharset(): string {\n        return this.customCharset || (this.getDictionary().alphabet + this.decNumberCharset);\n    }\n}\n","import Generator from '../core/Generator';\n\nexport class UuidGenerator extends Generator {\n    public static make(): UuidGenerator {\n        return new this();\n    }\n\n    public static get(): string {\n        return this.make().get();\n    }\n\n    protected readonly mask: string = '########-####-####-####-###########';\n\n    public generate(): string {\n        return this.makeMaskMapper(this.mask)(\n            () => this.getRandomFromArray(this.hexNumberCharset.split('')).toLowerCase()\n        );\n    }\n}\n","import {DatasetGenerator, IDatasetGeneratorParams} from '../generators/Dataset';\nimport {IStringGeneratorParams, StringGenerator} from '../generators/String';\nimport {UuidGenerator} from '../generators/Uuid';\n\nexport default {\n    dataset: (params?: IDatasetGeneratorParams): any => DatasetGenerator.get(params),\n    string: (params?: IStringGeneratorParams): any => StringGenerator.get(params),\n    uuid: (): any => UuidGenerator.get()\n};\n","import Collection from './core/Collection';\nimport {i18n} from './core/services/i18n';\nimport {pnrg as random} from './core/services/pnrg';\nimport Structure from './core/Structure';\nimport dictionaries from './dictionaries/index';\nimport * as Generators from './public_api/Generators';\nimport generators from './public_api/generatorsFunctions';\n\ni18n.setDictionaries(dictionaries);\n\nexport {\n    Collection,\n    Generators,\n    Structure,\n    generators,\n    i18n,\n    random\n};\n"],"names":["tslib_1.__extends"],"mappings":"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"}