{"version":3,"file":"jseeder.esm.js","sources":["../src/core/Collection.ts","../src/core/generators/Generator.ts","../src/core/generators/String.ts","../src/core/generators/Uuid.ts","../src/core/generators/Dataset.ts","../src/core/GeneratorFabric.ts","../src/core/I18n.ts","../src/core/Pnrg.ts","../src/core/utils/objectMap.ts","../src/core/Structure.ts","../src/dictionaries/en/alphabet.ts","../src/dictionaries/en/index.ts","../src/dictionaries/index.ts","../src/Jseeder.ts"],"sourcesContent":["export default class Collection {\n    protected structure;\n    protected sourceArray: any[];\n    protected size: number;\n\n    constructor(structure) {\n        this.structure = structure;\n    }\n\n    public setStructure(structure): this {\n        this.structure = structure;\n        return this;\n    }\n\n    public setSize(value: number): this {\n        this.size = value;\n        return this;\n    }\n\n    public setSourceArray(array: any[]): this {\n        this.sourceArray = array;\n        return this;\n    }\n\n    public process(): any[] {\n        return this.getArrayForFill().map(sourceObject => {\n            return this.structure.process(sourceObject);\n        });\n    }\n\n    protected getArrayForFill(): any[] {\n        let sourceArray: any[];\n\n        if (this.sourceArray != null && this.size != null) {\n            sourceArray = this.normalizeSourceArrayByCount(this.sourceArray, this.size);\n        } else if (this.sourceArray != null) {\n            sourceArray = [...this.sourceArray];\n        } else {\n            sourceArray = (new Array(this.size || 0)).fill({});\n        }\n\n        return sourceArray;\n    }\n\n    protected normalizeSourceArrayByCount(array: any[], count: number): any[] {\n        return count > array.length ?\n            [...array, new Array(count - array.length).fill({})]\n            : array.filter((item, index) => index < count);\n    }\n}\n","import {IDictionary} from '../interfaces/index';\nimport {TypeMaskMapper} from '../types/index';\nimport Pnrg from '../Pnrg';\nimport I18n from '../I18n';\n\nexport default abstract class Generator {\n    protected readonly hexNumberCharset: string = '0123456789ABCDEF';\n    protected readonly decNumberCharset: string = '0123456789';\n\n    protected i18n: I18n;\n    protected pnrg: Pnrg;\n\n    constructor(i18n: I18n, pnrg: Pnrg) {\n        this.i18n = i18n;\n        this.pnrg = pnrg;\n    }\n\n    public abstract generate(): any;\n\n    protected getDictionary(): IDictionary {\n        return this.i18n.getActiveDictionary();\n    }\n\n    protected random(): number {\n        return this.pnrg.random();\n    }\n\n    protected makeMaskMapper(mask: string, replaceableChar: string = '#'): TypeMaskMapper {\n        return callback => mask.split('')\n            .map(character => character === replaceableChar ? callback(character) : character)\n            .join('');\n    }\n\n    protected getRandomFromArray<T>(array: T[]): T {\n        return array[Math.floor(this.random() * array.length)];\n    }\n}\n","import Generator from './Generator';\nimport I18n from '../I18n';\nimport Pnrg from '../Pnrg';\nimport {IStringGeneratorParams} from '../interfaces/generator';\n\nexport default class StringGenerator extends Generator {\n    protected size: number;\n    protected customCharset: string;\n\n    constructor(i18n: I18n, pnrg: Pnrg, {size = 8, customCharset}: IStringGeneratorParams) {\n        super(i18n, pnrg);\n        this.size = size;\n        this.customCharset = customCharset;\n    }\n\n    public generate(): string {\n        const charset: string = this.getCharset();\n        let value: string = '';\n\n        for (let i = 0; i < this.size; i++) {\n            value += this.getRandomFromArray(charset.split(''));\n        }\n\n        return value;\n    }\n\n    public setSize(size: number): this {\n        this.size = size;\n        return this;\n    }\n\n    public setCustomCharset(charset: string): this {\n        this.customCharset = charset;\n        return this;\n    }\n\n    protected getCharset(): string {\n        return this.customCharset || (this.getDictionary().alphabet + this.decNumberCharset);\n    }\n}\n","import Generator from './Generator';\n\nexport default class StringGenerator extends Generator {\n    protected readonly mask: string = '########-####-####-####-###########';\n\n    public generate(): string {\n        return this.makeMaskMapper(this.mask)(\n            () => this.getRandomFromArray(this.hexNumberCharset.split('')).toLowerCase()\n        );\n    }\n}\n","import {IDatasetGeneratorParams} from '../interfaces/index';\nimport Generator from './Generator';\nimport Pnrg from '../Pnrg';\nimport I18n from '../I18n';\n\nexport default class DatasetGenerator extends Generator {\n    protected data: any[];\n\n    constructor(i18n: I18n, pnrg: Pnrg, {data = []}: IDatasetGeneratorParams) {\n        super(i18n, pnrg);\n        this.data = data;\n    }\n\n    public generate(): any {\n        return this.getRandomFromArray(this.data);\n    }\n\n    public setData(data: any[]): this {\n        this.data = data;\n        return this;\n    }\n}\n","import Pnrg from './Pnrg';\nimport I18n from './I18n';\nimport StringGenerator from './generators/String';\nimport UuidGenerator from './generators/Uuid';\nimport DatasetGenerator from './generators/Dataset';\nimport {\n    IStringGeneratorParams,\n    IDatasetGeneratorParams\n} from './interfaces/index';\n\nexport default class GeneratorFabric {\n    protected i18n: I18n;\n    protected pnrg: Pnrg;\n\n    constructor(i18n: I18n, pnrg: Pnrg) {\n        this.i18n = i18n;\n        this.pnrg = pnrg;\n    }\n\n    public string(params: IStringGeneratorParams): StringGenerator {\n        return new StringGenerator(this.i18n, this.pnrg, params);\n    }\n\n    public uuid(): UuidGenerator {\n        return new UuidGenerator(this.i18n, this.pnrg);\n    }\n\n    public dataset(params: IDatasetGeneratorParams): DatasetGenerator {\n        return new DatasetGenerator(this.i18n, this.pnrg, params);\n    }\n}\n","import {IDictionary, IDictionaryHash} from './interfaces/index';\n\nexport default class I18n {\n    protected locale: string;\n    protected dictionaries: IDictionaryHash;\n\n    constructor(locale, dictionaries: IDictionaryHash) {\n        this.locale = locale;\n        this.dictionaries = dictionaries;\n    }\n\n    public getActiveDictionary(): IDictionary {\n        return this.dictionaries[this.locale];\n    }\n\n    public setLocale(locale: string) {\n        this.locale = locale;\n        return this;\n    }\n\n    public setDictionaries(dictionaries: IDictionaryHash) {\n        this.dictionaries = dictionaries;\n        return this;\n    }\n}\n","export default class Pnrg {\n    protected seed: number;\n\n    constructor() {\n        this.seed = Math.floor((Math.random() * 0xF4240) + 1);\n    }\n\n    public random(): number {\n        return Math.abs(Math.sin(++this.seed * (this.seed + 0xFF))); // very stupid algorithm\n    }\n\n    public setSeed(seed: number): this {\n        this.seed = seed;\n        return this;\n    }\n}\n","export default (object, callback) => Object.keys(object).reduce((result, propName, index) => ({\n    ...result,\n    [propName]: callback(object[propName], propName, index, result)\n}), {});\n","import Collection from './Collection';\nimport Generator from './generators/Generator';\nimport objectMap from './utils/objectMap';\n\nexport default class Structure {\n    protected object: object;\n\n    constructor(object: object = {}) {\n        this.object = object;\n    }\n\n    public setObject(value): this {\n        this.object = value;\n        return this;\n    }\n\n    public process(sourceObject: object = {}): object {\n        return {\n            ...sourceObject,\n            ...this.processObject(this.object)\n        };\n    }\n\n    protected processObject(object: object): object {\n        return objectMap(object, value => this.processProperty(value));\n    }\n\n    protected processProperty(value: any): any {\n        let processedValue;\n\n        if (value instanceof Generator) {\n            processedValue = value.generate();\n        } else if (value instanceof Collection) { // recursion to child collection\n            processedValue = value.process();\n        } else if (value instanceof Object) {\n            processedValue = this.process(value);\n        } else { // plain value\n            processedValue = value;\n        }\n\n        return processedValue;\n    }\n}\n","export default 'abcdefghijklmnopqrstuvwxyz';\n","import alphabet from './alphabet';\n\nexport default {\n    alphabet\n};\n","import en from './en/index';\n\nexport default {\n    en\n};\n","import Collection from './core/Collection';\nimport GeneratorFabric from './core/GeneratorFabric';\nimport I18n from './core/I18n';\nimport Pnrg from './core/Pnrg';\nimport Structure from './core/Structure';\nimport dictionaries from './dictionaries/index';\n\nconst globalI18n = new I18n('en', dictionaries);\nconst globalPnrg = new Pnrg();\nconst globalGeneratorFabric = new GeneratorFabric(globalI18n, globalPnrg);\n\nexport default class Jseeder {\n    public static types(): GeneratorFabric {\n        return globalGeneratorFabric;\n    }\n\n    public static collection(structure: Structure | object): Collection {\n        structure = structure instanceof Structure ? structure : Jseeder.structure(structure);\n        return new Collection(structure);\n    }\n\n    public static structure(object: object): Structure {\n        return new Structure(object);\n    }\n\n    public static locale(locale: string): typeof Jseeder {\n        globalI18n.setLocale(locale);\n        return Jseeder;\n    }\n\n    public static seed(seed: number): typeof Jseeder {\n        globalPnrg.setSeed(seed);\n        return Jseeder;\n    }\n\n    protected i18n: I18n;\n    protected pnrg: Pnrg;\n    protected generatorFabric: GeneratorFabric;\n\n    constructor(i18n: I18n, pnrg: Pnrg, generatorFabric: GeneratorFabric) {\n        this.i18n = i18n;\n        this.pnrg = pnrg;\n        this.generatorFabric = generatorFabric;\n    }\n\n    public types(): GeneratorFabric {\n        return this.generatorFabric;\n    }\n\n    public instance(lang = 'en'): Jseeder {\n        const i18n = new I18n(lang, dictionaries);\n        const pnrg = new Pnrg();\n        const generatorFabric = new GeneratorFabric(i18n, globalPnrg);\n        return new Jseeder(i18n, pnrg, generatorFabric);\n    }\n\n    public collection(structure: Structure): Collection {\n        return Jseeder.collection(structure);\n    }\n\n    public structure(object: object): Structure {\n        return Jseeder.structure(object);\n    }\n\n    public locale(locale: string): this {\n        this.i18n.setLocale(locale);\n        return this;\n    }\n\n    public seed(seed: number): this {\n        this.pnrg.setSeed(seed);\n        return this;\n    }\n}\n"],"names":["tslib_1.__extends","UuidGenerator"],"mappings":"AAAA;IAKI,oBAAY,SAAS;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;IAEM,iCAAY,GAAnB,UAAoB,SAAS;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,OAAO,IAAI,CAAC;KACf;IAEM,4BAAO,GAAd,UAAe,KAAa;QACxB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,OAAO,IAAI,CAAC;KACf;IAEM,mCAAc,GAArB,UAAsB,KAAY;QAC9B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,OAAO,IAAI,CAAC;KACf;IAEM,4BAAO,GAAd;QAAA,iBAIC;QAHG,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,UAAA,YAAY;YAC1C,OAAO,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;SAC/C,CAAC,CAAC;KACN;IAES,oCAAe,GAAzB;QACI,IAAI,WAAkB,CAAC;QAEvB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YAC/C,WAAW,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/E;aAAM,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;YACjC,WAAW,GAAO,IAAI,CAAC,WAAW,QAAC,CAAC;SACvC;aAAM;YACH,WAAW,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;SACtD;QAED,OAAO,WAAW,CAAC;KACtB;IAES,gDAA2B,GAArC,UAAsC,KAAY,EAAE,KAAa;QAC7D,OAAO,KAAK,GAAG,KAAK,CAAC,MAAM,GACnB,KAAK,SAAE,IAAI,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,KACjD,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,KAAK,GAAG,KAAK,GAAA,CAAC,CAAC;KACtD;IACL,iBAAC;CAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CD;IAOI,mBAAY,IAAU,EAAE,IAAU;QANf,qBAAgB,GAAW,kBAAkB,CAAC;QAC9C,qBAAgB,GAAW,YAAY,CAAC;QAMvD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;IAIS,iCAAa,GAAvB;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC1C;IAES,0BAAM,GAAhB;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;KAC7B;IAES,kCAAc,GAAxB,UAAyB,IAAY,EAAE,eAA6B;QAA7B,gCAAA,EAAA,qBAA6B;QAChE,OAAO,UAAA,QAAQ,IAAI,OAAA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;aAC5B,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,KAAK,eAAe,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS,GAAA,CAAC;aACjF,IAAI,CAAC,EAAE,CAAC,GAAA,CAAC;KACjB;IAES,sCAAkB,GAA5B,UAAgC,KAAU;QACtC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;KAC1D;IACL,gBAAC;CAAA,IAAA;;AC/BD;IAA6CA,mCAAS;IAIlD,yBAAY,IAAU,EAAE,IAAU,EAAE,EAAiD;YAAhD,YAAQ,EAAR,6BAAQ,EAAE,gCAAa;QAA5D,YACI,kBAAM,IAAI,EAAE,IAAI,CAAC,SAGpB;QAFG,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;;KACtC;IAEM,kCAAQ,GAAf;QACI,IAAM,OAAO,GAAW,IAAI,CAAC,UAAU,EAAE,CAAC;QAC1C,IAAI,KAAK,GAAW,EAAE,CAAC;QAEvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAChC,KAAK,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;SACvD;QAED,OAAO,KAAK,CAAC;KAChB;IAEM,iCAAO,GAAd,UAAe,IAAY;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;KACf;IAEM,0CAAgB,GAAvB,UAAwB,OAAe;QACnC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,OAAO,IAAI,CAAC;KACf;IAES,oCAAU,GAApB;QACI,OAAO,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,aAAa,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACxF;IACL,sBAAC;CAlCD,CAA6C,SAAS,GAkCrD;;ACrCD;IAA6CA,mCAAS;IAAtD;QAAA,qEAQC;QAPsB,UAAI,GAAW,qCAAqC,CAAC;;KAO3E;IALU,kCAAQ,GAAf;QAAA,iBAIC;QAHG,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CACjC,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAA,CAC/E,CAAC;KACL;IACL,sBAAC;CARD,CAA6C,SAAS,GAQrD;;ACLD;IAA8CA,oCAAS;IAGnD,0BAAY,IAAU,EAAE,IAAU,EAAE,EAAoC;YAAnC,YAAS,EAAT,8BAAS;QAA9C,YACI,kBAAM,IAAI,EAAE,IAAI,CAAC,SAEpB;QADG,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;KACpB;IAEM,mCAAQ,GAAf;QACI,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7C;IAEM,kCAAO,GAAd,UAAe,IAAW;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;KACf;IACL,uBAAC;CAhBD,CAA8C,SAAS,GAgBtD;;ACXD;IAII,yBAAY,IAAU,EAAE,IAAU;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;IAEM,gCAAM,GAAb,UAAc,MAA8B;QACxC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC5D;IAEM,8BAAI,GAAX;QACI,OAAO,IAAIC,iBAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAClD;IAEM,iCAAO,GAAd,UAAe,MAA+B;QAC1C,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC7D;IACL,sBAAC;CAAA,IAAA;;AC5BD;IAII,cAAY,MAAM,EAAE,YAA6B;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;KACpC;IAEM,kCAAmB,GAA1B;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACzC;IAEM,wBAAS,GAAhB,UAAiB,MAAc;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf;IAEM,8BAAe,GAAtB,UAAuB,YAA6B;QAChD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,OAAO,IAAI,CAAC;KACf;IACL,WAAC;CAAA,IAAA;;ACxBD;IAGI;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,IAAI,CAAC,CAAC,CAAC;KACzD;IAEM,qBAAM,GAAb;QACI,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;KAC/D;IAEM,sBAAO,GAAd,UAAe,IAAY;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;KACf;IACL,WAAC;CAAA,IAAA;;ACfD,iBAAe,UAAC,MAAM,EAAE,QAAQ,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,QAAQ,EAAE,KAAK;;IAAK,qBACtF,MAAM,eACR,QAAQ,IAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC;CACjE,EAAE,EAAE,CAAC,GAAA,EAAC;;ACCR;IAGI,mBAAY,MAAmB;QAAnB,uBAAA,EAAA,WAAmB;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAEM,6BAAS,GAAhB,UAAiB,KAAK;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,OAAO,IAAI,CAAC;KACf;IAEM,2BAAO,GAAd,UAAe,YAAyB;QAAzB,6BAAA,EAAA,iBAAyB;QACpC,oBACO,YAAY,EACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,EACpC;KACL;IAES,iCAAa,GAAvB,UAAwB,MAAc;QAAtC,iBAEC;QADG,OAAO,SAAS,CAAC,MAAM,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;KAClE;IAES,mCAAe,GAAzB,UAA0B,KAAU;QAChC,IAAI,cAAc,CAAC;QAEnB,IAAI,KAAK,YAAY,SAAS,EAAE;YAC5B,cAAc,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;SACrC;aAAM,IAAI,KAAK,YAAY,UAAU,EAAE;YACpC,cAAc,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;SACpC;aAAM,IAAI,KAAK,YAAY,MAAM,EAAE;YAChC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACxC;aAAM;YACH,cAAc,GAAG,KAAK,CAAC;SAC1B;QAED,OAAO,cAAc,CAAC;KACzB;IACL,gBAAC;CAAA,IAAA;;AC1CD,eAAe,4BAA4B,CAAC;;ACE5C,SAAe;IACX,QAAQ,UAAA;CACX,CAAC;;ACFF,mBAAe;IACX,EAAE,IAAA;CACL,CAAC;;ACGF,IAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AAChD,IAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;AAC9B,IAAM,qBAAqB,GAAG,IAAI,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;AAE1E;IA4BI,iBAAY,IAAU,EAAE,IAAU,EAAE,eAAgC;QAChE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;KAC1C;IA/Ba,aAAK,GAAnB;QACI,OAAO,qBAAqB,CAAC;KAChC;IAEa,kBAAU,GAAxB,UAAyB,SAA6B;QAClD,SAAS,GAAG,SAAS,YAAY,SAAS,GAAG,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACtF,OAAO,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;KACpC;IAEa,iBAAS,GAAvB,UAAwB,MAAc;QAClC,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC;KAChC;IAEa,cAAM,GAApB,UAAqB,MAAc;QAC/B,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;KAClB;IAEa,YAAI,GAAlB,UAAmB,IAAY;QAC3B,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,OAAO,OAAO,CAAC;KAClB;IAYM,uBAAK,GAAZ;QACI,OAAO,IAAI,CAAC,eAAe,CAAC;KAC/B;IAEM,0BAAQ,GAAf,UAAgB,IAAW;QAAX,qBAAA,EAAA,WAAW;QACvB,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC1C,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAM,eAAe,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC9D,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;KACnD;IAEM,4BAAU,GAAjB,UAAkB,SAAoB;QAClC,OAAO,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;KACxC;IAEM,2BAAS,GAAhB,UAAiB,MAAc;QAC3B,OAAO,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KACpC;IAEM,wBAAM,GAAb,UAAc,MAAc;QACxB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC;KACf;IAEM,sBAAI,GAAX,UAAY,IAAY;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;KACf;IACL,cAAC;CAAA,IAAA;;;;"}